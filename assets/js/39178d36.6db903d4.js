"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["1809"],{24935:function(e,s,t){t.r(s),t.d(s,{frontMatter:()=>r,toc:()=>d,default:()=>u,metadata:()=>n,assets:()=>l,contentTitle:()=>a});var n=JSON.parse('{"id":"editors/online-ides","title":"Online IDEs","description":"Metals can also be installed in some online environments, which enable users to","source":"@site/target/docs/editors/online-ides.md","sourceDirName":"editors","slug":"/editors/online-ides","permalink":"/metals/docs/editors/online-ides","draft":false,"unlisted":false,"editUrl":"https://github.com/scalameta/metals/edit/main/docs/editors/online-ides.md","tags":[],"version":"current","lastUpdatedBy":null,"lastUpdatedAt":null,"frontMatter":{"id":"online-ides","title":"Online IDEs"},"sidebar":"docs","previous":{"title":"Helix","permalink":"/metals/docs/editors/helix"},"next":{"title":"User Configuration","permalink":"/metals/docs/editors/user-configuration"}}'),i=t(74848),o=t(84429);let r={id:"online-ides",title:"Online IDEs"},a,l={},d=[{value:"Example repository for Metals",id:"example-repository-for-metals",level:2},{value:"Open VSX",id:"open-vsx",level:2}];function c(e){let s={a:"a",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.p,{children:"Metals can also be installed in some online environments, which enable users to\nwork on their code inside of a browser. This can be a good option when users need\nto set up their workspace quickly or are lacking appropriate resources on their\nlocal machine."}),"\n",(0,i.jsx)(s.h2,{id:"example-repository-for-metals",children:"Example repository for Metals"}),"\n",(0,i.jsxs)(s.p,{children:["An example repository, which can be used to optimize the setup of your own online environment,\ncan be found ",(0,i.jsx)(s.a,{href:"https://github.com/scalameta/metals-gitpod-sample",children:"here"}),". The project\ncontains, out of the box, everything that you need to start experimenting with\nMetals in an online environment similar to Visual Studio Code."]}),"\n",(0,i.jsx)(s.h2,{id:"open-vsx",children:"Open VSX"}),"\n",(0,i.jsxs)(s.p,{children:["Metals extension is available in the ",(0,i.jsx)(s.a,{href:"https://open-vsx.org/",children:"Open VSX Registry"}),"\nwhich is used to provide extensions in Gitpod.\nYou can find the newest version of Metals in there."]}),"\n",(0,i.jsx)(s.h1,{id:"github-codespaces-and-githubdev",children:"GitHub Codespaces and GitHub.dev"}),"\n",(0,i.jsx)(s.p,{children:"First, some definitions:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"https://github.com/features/codespaces",children:"GitHub Codespaces"})," are remote dev containers you can connect to using VS Code Desktop or VS Code Web."]}),"\n",(0,i.jsxs)(s.li,{children:["GitHub.dev, also referred to as ",(0,i.jsx)(s.a,{href:"https://code.visualstudio.com/docs/remote/codespaces#_browserbased-editor",children:'"Browser-based editor"'}),", is a version of VS Code Web that runs entirely in your browser (crucially, this is different than connecting to a Codespace using VS Code Web)."]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"Metals fully works in GitHub Codespaces, but not on GitHub.dev."}),"\n",(0,i.jsxs)(s.p,{children:["This is because Codespaces can run Java (being full fledged containerized environments) and extensions have access to a real file system, whereas GitHub.dev is limited to browser-only technologies, hence it can't run Java and it accesses files using a virtual file system (see ",(0,i.jsx)(s.a,{href:"https://github.com/microsoft/vscode/wiki/Virtual-Workspaces",children:"Virtual Workspaces"}),"). These limitations make it impossible to run Metals on GitHub.dev. For more details, see ",(0,i.jsx)(s.a,{href:"https://github.com/scalameta/metals-feature-requests/issues/225",children:"this issue"}),"."]})]})}function u(e={}){let{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},84429:function(e,s,t){t.d(s,{R:()=>r,x:()=>a});var n=t(96540);let i={},o=n.createContext(i);function r(e){let s=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(o.Provider,{value:s},e.children)}}}]);