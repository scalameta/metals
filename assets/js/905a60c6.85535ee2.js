"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["418"],{31027:function(e,r,o){o.r(r),o.d(r,{metadata:()=>n,contentTitle:()=>a,default:()=>u,assets:()=>l,toc:()=>c,frontMatter:()=>s});var n=JSON.parse('{"id":"troubleshooting/proxy","title":"Proxy and mirrors","description":"There are several parts inside Metals and Bloop that require resolving","source":"@site/target/docs/troubleshooting/proxy.md","sourceDirName":"troubleshooting","slug":"/troubleshooting/proxy","permalink":"/metals/docs/troubleshooting/proxy","draft":false,"unlisted":false,"editUrl":"https://github.com/scalameta/metals/edit/main/docs/troubleshooting/proxy.md","tags":[],"version":"current","frontMatter":{"id":"proxy","title":"Proxy and mirrors"},"sidebar":"docs","previous":{"title":"Running and debugging","permalink":"/metals/docs/integrations/debug-adapter-protocol"},"next":{"title":"Frequently asked questions","permalink":"/metals/docs/troubleshooting/faq"}}'),t=o("85893"),i=o("50065");let s={id:"proxy",title:"Proxy and mirrors"},a=void 0,l={},c=[{value:"Mirrors",id:"mirrors",level:2},{value:"Via global properties file",id:"via-global-properties-file",level:3},{value:"Via environment variable",id:"via-environment-variable",level:3},{value:"Via properties",id:"via-properties",level:3},{value:"Custom artifact repositories (Maven or Ivy resolvers)",id:"custom-artifact-repositories-maven-or-ivy-resolvers",level:2},{value:"Proxy settings",id:"proxy-settings",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"The server did not start, got FailedToOpenBspConnection",id:"the-server-did-not-start-got-failedtoopenbspconnection",level:3},{value:"Timeout waiting for &#39;build/initialize&#39; response",id:"timeout-waiting-for-buildinitialize-response",level:3},{value:"Mirrors still do not work for all dependencies",id:"mirrors-still-do-not-work-for-all-dependencies",level:3}];function d(e){let r={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.p,{children:"There are several parts inside Metals and Bloop that require resolving\nadditional dependencies from the internet. Inside environments behind a proxy or\nwith private artifact repositories Metals might not be able to start, because it\ncannot easily download the needed dependencies."}),"\n",(0,t.jsx)(r.p,{children:"There are multiple ways of fixing these issues, but not all of them work in all\nsituations. While we are trying to make it as painless as possible to setup\neverything, there are some steps that might need to be done manually."}),"\n",(0,t.jsx)(r.p,{children:"Everything inside Metals uses Coursier to download its dependencies:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["The Visual Studio Code and ",(0,t.jsx)(r.code,{children:"nvim-metals"})," extensions both use Coursier to\ndownload Metals server, although they do it slightly different. The VS Code\nextension has a Coursier boostrap file, which is used to is to download a full\nCoursier version. It's used to keep the extension size down to a minimum,\nwhereas ",(0,t.jsx)(r.code,{children:"nvim-metals"})," requires Coursier to be installed on the users machine."]}),"\n",(0,t.jsx)(r.li,{children:"Metals uses Coursier api to download dependencies needed for a particular\nScala version"}),"\n",(0,t.jsx)(r.li,{children:"Bloop uses Coursier api to download the SemanticDB plugin"}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["You can find some more information about particular topics on\n",(0,t.jsx)(r.a,{href:"https://get-coursier.io/docs/overview",children:"Coursier's website"}),", but we will try to\nsummarize the most useful solutions here."]}),"\n",(0,t.jsx)(r.h2,{id:"mirrors",children:"Mirrors"}),"\n",(0,t.jsx)(r.p,{children:"If Maven Central is not available for your workspace it might be best to use\nCoursier's mirrors. Especially since Coursier boostrap tries to download the\ncore of Coursier from Maven Central directly, which can only be changed using\nthe mirrors. Not all functionalities are yet available for the bootstrapped\nCoursier version, including custom repositories, so mirrors are really the only\nway to fix this."}),"\n",(0,t.jsx)(r.p,{children:"There are different ways to setup mirrors:"}),"\n",(0,t.jsx)(r.h3,{id:"via-global-properties-file",children:"Via global properties file"}),"\n",(0,t.jsxs)(r.p,{children:["Create ",(0,t.jsx)(r.code,{children:"mirror.properties"})," file with the contents:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"central.from=https://repo1.maven.org/maven2\ncentral.to=http://exmaple.com:8080/nexus/content/groups/public\n"})}),"\n",(0,t.jsxs)(r.p,{children:["You need to replace the uri after ",(0,t.jsx)(r.code,{children:"central.to="})," with your private repository."]}),"\n",(0,t.jsx)(r.p,{children:"The location of the mirror file varies depending on the operating system:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["Windows:\n",(0,t.jsx)(r.code,{children:"C:\\Users\\<user_name>\\AppData\\Roaming\\Coursier\\config\\mirror.properties"})]}),"\n",(0,t.jsxs)(r.li,{children:["Linux: ",(0,t.jsx)(r.code,{children:"~/.config/coursier/mirror.properties"})]}),"\n",(0,t.jsxs)(r.li,{children:["MacOS: ",(0,t.jsx)(r.code,{children:"~/Library/Preferences/Coursier/mirror.properties"})]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"This solution will work in most cases for all previously mentioned usages of\nCoursier, which is especially important in the case of the Bloop server, which\nwhen started by Metals will not have any system properties forwarded."}),"\n",(0,t.jsx)(r.h3,{id:"via-environment-variable",children:"Via environment variable"}),"\n",(0,t.jsxs)(r.p,{children:["You can set the environment variable ",(0,t.jsx)(r.code,{children:"COURSIER_MIRRORS"})," with the location of the\nfile containing the mirror definition. That environment variable will need to\navailable either locally or globally for the Metals server. In case of the\nVisual Studio Code extension it means you will need to start it from command\nline with that variable in scope."]}),"\n",(0,t.jsx)(r.h3,{id:"via-properties",children:"Via properties"}),"\n",(0,t.jsx)(r.p,{children:"You can also use properties to specify the location of the mirror file, for\nexample:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"-Dcoursier.mirrors=~/.config/coursier/mirror.properties\n"})}),"\n",(0,t.jsx)(r.p,{children:"This property needs to be added to the Metals server and Coursier invocation.\nHowever, this solution will not work for Bloop, because properties are not\nforwarded to the invocation of the Bloop server. You will need to use a\ndifferent method for Bloop in this case or you can run the build server manually\nwith everything specified separately."}),"\n",(0,t.jsx)(r.h2,{id:"custom-artifact-repositories-maven-or-ivy-resolvers",children:"Custom artifact repositories (Maven or Ivy resolvers)"}),"\n",(0,t.jsxs)(r.p,{children:["In case you need to add custom repositories to resolve Metals server artifacts\nyou can use the ",(0,t.jsx)(r.code,{children:"COURSIER_REPOSITORIES"})," environment variable. This will tell\nCoursier to try to download artifacts from your private artifact repository.\nThis is also available as a setting in the Metals Visual Studio Code and\n",(0,t.jsx)(r.code,{children:"nvim-metals"})," extensions."]}),"\n",(0,t.jsx)(r.h2,{id:"proxy-settings",children:"Proxy settings"}),"\n",(0,t.jsxs)(r.p,{children:["In some cases, workspaces might require a proxy in order to resolve the needed\nartifacts. Depending on the way Metals server is started, proxy settings can be\nspecified using properties inside a ",(0,t.jsx)(r.code,{children:".jvmopts"})," file and\n",(0,t.jsx)(r.code,{children:"metals.serverProperties"})," for Visual Studio Code or ",(0,t.jsx)(r.code,{children:"serverProperties"})," in your\nsettings table for ",(0,t.jsx)(r.code,{children:"nvim-metals"}),", or via properties for Coursier and Metals\ninvocations."]}),"\n",(0,t.jsxs)(r.p,{children:["However, because proxy properties might vary between workspaces and a Bloop\nserver must work for multiple clients at the same time they are not forwarded to\nthe Bloop itself. To make sure that Bloop uses the correct proxy settings, you\ncan specify them by copying the correct ",(0,t.jsx)(r.code,{children:".jvmopts"})," file to the ",(0,t.jsx)(r.code,{children:"~/.bloop"}),"\ndirectory, which will make them global."]}),"\n",(0,t.jsxs)(r.p,{children:["If you are using a manually installed Bloop server, each time you run ",(0,t.jsx)(r.code,{children:"bloop"}),"\nfrom commandline, the proxy settings will be reapplied according to the current\nworkspace's ",(0,t.jsx)(r.code,{children:".jvmopts"}),". This should not be an issue, since those settings are\nrequired only to download the compiler bridges and SemanticDB plugin."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Important"})," Each setting needs to be on a separate line."]}),"\n",(0,t.jsx)(r.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(r.p,{children:"There has already been a couple of issues surrounding this topic, if you are\nstill having issues you can take a look at some of them:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"https://github.com/scalameta/metals/issues/1315",children:"https://github.com/scalameta/metals/issues/1315"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"https://github.com/scalameta/metals/issues/1301",children:"https://github.com/scalameta/metals/issues/1301"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"https://github.com/scalameta/metals/issues/1306",children:"https://github.com/scalameta/metals/issues/1306"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"https://github.com/scalameta/metals/issues/1362",children:"https://github.com/scalameta/metals/issues/1362"})}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"the-server-did-not-start-got-failedtoopenbspconnection",children:"The server did not start, got FailedToOpenBspConnection"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"error: The command bsp --protocol tcp --port 44559 returned with an error\n>\nerror: The launcher failed to establish a bsp connection, aborting...\nERROR Failed to connect with build server, no functionality will work.\njava.lang.RuntimeException: The server did not start, got FailedToOpenBspConnection\n	at bloop.launcher.LauncherMain.failPromise$1(Launcher.scala:92)\n	at bloop.launcher.LauncherMain.runLauncher(Launcher.scala:119)\n	at scala.meta.internal.metals.BloopServers$$anon$1.run(BloopServers.scala:101)\n	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n	at java.util.concurrent.FutureTask.run(FutureTask.java:264)\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n	at java.lang.Thread.run(Thread.java:834)\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'Exception in thread "bloop-server-background" java.io.IOException: Cannot run program "java" (in directory "<some path here ...>"): error=2, No such file or directory\n        at java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)\n'})}),"\n",(0,t.jsx)(r.p,{children:"This might mean that you don't have your java installation on your PATH and\nBloop was unable to start."}),"\n",(0,t.jsx)(r.h3,{id:"timeout-waiting-for-buildinitialize-response",children:"Timeout waiting for 'build/initialize' response"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\\Users\\tgodzik\\AppData\\Local\\scalameta\\metals\\cache\\bsp.trace.json\nERROR Timeout waiting for 'build/initialize' response\nERROR Failed to connect with build server, no functionality will work.\njava.util.concurrent.TimeoutException\n	at java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1886)\n	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2021)\n	at scala.meta.internal.metals.BuildServerConnection$.initialize(BuildServerConnection.scala:259)\n	at scala.meta.internal.metals.BuildServerConnection$.$anonfun$fromSockets$1(BuildServerConnection.scala:203)\n	at scala.util.Success.$anonfun$map$1(Try.scala:255)\n	at scala.util.Success.map(Try.scala:213)\n	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)\n	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)\n	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)\n	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n	at java.lang.Thread.run(Thread.java:834)\n\nWARN  Stopped configuration of SemanticDB in Scala 2.13.1 projects: Error downloading org.scalameta:semanticdb-scalac_2.13.1:4.3.0\n  not found: C:\\Users\\tgodzik\\.ivy2\\local\\org.scalameta\\semanticdb-scalac_2.13.1\\4.3.0\\ivys\\ivy.xml\n  download error: Caught java.net.ConnectException: Connection timed out: connect (Connection timed out: connect) while downloading https://repo1.maven.org/maven2/org/scalameta/semanticdb-scalac_2.13.1/4.3.0/semanticdb-scalac_2.13.1-4.3.0.pom\n"})}),"\n",(0,t.jsx)(r.p,{children:"This might mean you need to specify proxy settings for Bloop or add custom\nrepositories as specified above."}),"\n",(0,t.jsx)(r.h3,{id:"mirrors-still-do-not-work-for-all-dependencies",children:"Mirrors still do not work for all dependencies"}),"\n",(0,t.jsx)(r.p,{children:"In some specific configurations it might be needed to define additional mirrors\nlike:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"jcenter.from=https://repo1.maven.org/maven2\njcenter.to=https://artifactory.mycomany.com/maven2\n\ntypesafe.from=https://repo.typesafe.com/typesafe/ivy-releases\ntypesafe.to=https://artifactory.mycompany.com/typesafe-ivy-releases/\n"})}),"\n",(0,t.jsxs)(r.p,{children:["The number of repositories to add depends on how the company's infrastructure is\nset up. The key is to keep adding mirror entries until you've fixed each resolve\nerror. In case of sbt you can find out what the repos are named like\ntypesafe.from|to by checking\n",(0,t.jsx)(r.a,{href:"https://www.scala-sbt.org/1.x/docs/Resolvers.html#Predefined+resolvers",children:"the official documentation"}),"\nand any custom resolvers your workspace has defined."]})]})}function u(e={}){let{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},50065:function(e,r,o){o.d(r,{Z:function(){return a},a:function(){return s}});var n=o(67294);let t={},i=n.createContext(t);function s(e){let r=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);