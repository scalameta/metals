"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["8367"],{40446:function(e,s,t){t.r(s),t.d(s,{assets:function(){return i},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return o},metadata:function(){return n},toc:function(){return c}});var n=t(65756),a=t(85893),r=t(50065);let o={authors:"dos65",title:"Towards better releases"},l=void 0,i={authorsImageUrls:[void 0]},c=[{value:"Decouple Metals releases from Scala releases",id:"decouple-metals-releases-from-scala-releases",level:2},{value:"Pre-release version for VSCode extension",id:"pre-release-version-for-vscode-extension",level:2}];function h(e){let s={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(s.p,{children:["As many of you might have noticed, the previous ",(0,a.jsx)(s.code,{children:"0.11.0"})," release didn't go\nsmoothly due to a number of issues that came to light only after the release was\npublished. Some of them were quite critical and the only option to continue to\nwork was to downgrade Metals until ",(0,a.jsx)(s.code,{children:"0.11.1"})," arrived."]}),"\n",(0,a.jsx)(s.p,{children:"We apologize for that!"}),"\n",(0,a.jsx)(s.p,{children:"However, this post is not only about saying sorry. In order to avoid such\nsituations in the future we have taken it upon ourselves to take steps that will\nallow us to detect issues earlier."}),"\n",(0,a.jsx)(s.p,{children:"There were two main improvements that were implemented since the last release:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Decouple Metals releases from Scala releases"}),"\n",(0,a.jsx)(s.li,{children:"Pre-release version for VSCode extension"}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"decouple-metals-releases-from-scala-releases",children:"Decouple Metals releases from Scala releases"}),"\n",(0,a.jsxs)(s.p,{children:["We haven't mentioned this in the release notes for ",(0,a.jsx)(s.code,{children:"0.11.0"}),", but since that\nversion we have changed the way Metals detects whether a specific version is\nsupported and thanks to that we are now able to backpublish new Scala versions\nsupport. The support of Scala ",(0,a.jsx)(s.code,{children:"3.1.1"})," Scala was added to Metals ",(0,a.jsx)(s.code,{children:"0.11.1"})," using\nthis new mechanism. It allows us to provide new Scala version support much\nfaster than before and also support Scala3-NIGTHTLY versions."]}),"\n",(0,a.jsx)(s.p,{children:"The additional benefit from this approach is that it eliminates time pressure\nfor future Metals releases. If you look at the release notes for previous\nversions, almost every one brings at least one new compiler version support.\nHaving this limitation and the need to provide the new release as soon as\npossible always increases the chances of something affecting the release. So,\nnow with this new feature we are able to take our time for final fixes and do\nreleases with more confidence."}),"\n",(0,a.jsx)(s.p,{children:"The current state for Scala versions support is:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Every Metals release comes with support to all known supported Scala\nversions + last 5 latest Scala3-NIGHTLY versions. This is applied to SNAPSHOT\nreleases too."}),"\n",(0,a.jsxs)(s.li,{children:["In case a new Scala version appear, the latest Metals release will receive its\nsupport automatically. For example, the next Scala ",(0,a.jsx)(s.code,{children:"3.1.2"})," will be supported\nonly by the latest Metals ",(0,a.jsx)(s.code,{children:"0.11.1"})," but not by ",(0,a.jsx)(s.code,{children:"0.11.0"}),". That works for\nScala3-NIGHTLY versions too. Metals has a scheduled daily job that publishes\nartifacts for newly discovered NIGHTLY versions."]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"pre-release-version-for-vscode-extension",children:"Pre-release version for VSCode extension"}),"\n",(0,a.jsxs)(s.p,{children:["Another great feature that was added was the possibility to use the\n",(0,a.jsx)(s.code,{children:"pre-release"})," versions of the Metals extension. If you open the Metals extension\npage, you will find a ",(0,a.jsx)(s.code,{children:"Switch to Pre-release version"})," button. This version is\nlike a snapshot, it's published for every change in the\n",(0,a.jsx)(s.a,{href:"https://github.com/scalameta/metals-vscode",children:"scalameta/metals-vscode"}),"\nrepository."]}),"\n",(0,a.jsx)(s.p,{children:"It allows to test not yet released features, as well as to check if everything\nworks fine for your workspace using the latest main branch. Some issues might be\nobserved only under the particular version of the client as was the case with\nthe ill fated 0.11.0 release."}),"\n",(0,a.jsxs)(s.p,{children:["Also, there is a new setting ",(0,a.jsx)(s.code,{children:"Metals: Suggest Latest Upgrade"})," that is enabled by\ndefault for ",(0,a.jsx)(s.code,{children:"pre-release"}),". If you have it enabled, you will receive\nnotifications with an option to upgrade Metals server version to the latest\nsnapshot once a day."]}),"\n",(0,a.jsxs)(s.p,{children:["We hope that some brave users will start using this ",(0,a.jsx)(s.code,{children:"pre-release"})," version and\nreport issues if you encounter any. This will help us spot problems earlier."]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.em,{children:"Notice"}),": Using pre-release versions may result in a less stable experience. In\ncase of issues, if you are switching back from ",(0,a.jsx)(s.code,{children:"pre-release"})," to ",(0,a.jsx)(s.code,{children:"release"})," you\nalso need to downgrade ",(0,a.jsx)(s.code,{children:"Metals: Server Version"})," manually. The actual version\nmight be found at\n",(0,a.jsx)(s.a,{href:"https://scalameta.org/metals/docs/#latest-metals-server-versions",children:"docs page"})," or\n",(0,a.jsx)(s.a,{href:"https://scalameta.org/metals/latests.json",children:"latest.json"})]})]})}function d(e={}){let{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},50065:function(e,s,t){t.d(s,{Z:function(){return l},a:function(){return o}});var n=t(67294);let a={},r=n.createContext(a);function o(e){let s=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(r.Provider,{value:s},e.children)}},65756:function(e){e.exports=JSON.parse('{"permalink":"/metals/blog/2022/02/23/towards-better-releases","source":"@site/blog/2022-02-23-towards-better-releases.md","title":"Towards better releases","description":"As many of you might have noticed, the previous 0.11.0 release didn\'t go","date":"2022-02-23T00:00:00.000Z","tags":[],"readingTime":2.915,"hasTruncateMarker":false,"authors":[{"name":"Vadim Chelyshov","url":"https://twitter.com/_dos65","imageURL":"https://github.com/dos65.png","key":"dos65","page":null}],"frontMatter":{"authors":"dos65","title":"Towards better releases"},"unlisted":false,"prevItem":{"title":"Metals v0.11.2 - Aluminium","permalink":"/metals/blog/2022/03/08/aluminium"},"nextItem":{"title":"Metals v0.11.1 - Aluminium","permalink":"/metals/blog/2022/01/17/aluminium"}}')}}]);