"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["3491"],{22741:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>s,toc:()=>c,default:()=>h,metadata:()=>l,assets:()=>r,contentTitle:()=>o});var l=JSON.parse('{"id":"build-tools/bazel","title":"Bazel","description":"Bazel is a build tool that is used by Google and other companies to build large","source":"@site/target/docs/build-tools/bazel.md","sourceDirName":"build-tools","slug":"/build-tools/bazel","permalink":"/metals/docs/build-tools/bazel","draft":false,"unlisted":false,"editUrl":"https://github.com/scalameta/metals/edit/main/docs/build-tools/bazel.md","tags":[],"version":"current","lastUpdatedBy":null,"lastUpdatedAt":null,"frontMatter":{"id":"bazel","title":"Bazel"},"sidebar":"docs","previous":{"title":"Overview","permalink":"/metals/docs/build-tools/overview"},"next":{"title":"Bloop","permalink":"/metals/docs/build-tools/bloop"}}'),a=t(74848),i=t(84429);let s={id:"bazel",title:"Bazel"},o,r={},c=[{value:"Automatic installation",id:"automatic-installation",level:2},{value:"Manual installation",id:"manual-installation",level:2},{value:"Mezel",id:"mezel",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Bazel is restarting between CLI and Metals",id:"bazel-is-restarting-between-cli-and-metals",level:3}];function d(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Bazel is a build tool that is used by Google and other companies to build large\nmonorepos. It is a bit more complex to set up than other build tools, but it is\npraised for its speed and scalability. It is also being used more and more in a\nlot of Scala codebases."}),"\n",(0,a.jsxs)(n.p,{children:["Since, there is no way to currently export Bazel build definition to Bloop,\nMetals is able to work with Bazel via the\n",(0,a.jsx)(n.a,{href:"https://github.com/JetBrains/bazel-bsp",children:"Bazel BSP server"}),". Thanks to the great\nwork by the JetBrains team, Metals is able to work almost directly with Bazel\nand reuse all its perks."]}),"\n",(0,a.jsx)(n.h2,{id:"automatic-installation",children:"Automatic installation"}),"\n",(0,a.jsx)(n.p,{children:'The first time you open Metals in a new Bazel workspace you will be prompted to\nimport the build. Select "Import Build" to start the automatic installation.\nThis will create all the needed files, this includes:'}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"projectview.bazel"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"This file contains the default settings configured so that Metals can work with\nBazel without a hitch. By default it will work for all targets in the workspace,\nbut can be easily modified to only work with a subset, which will work much\nfaster."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"targets:\n    //...\n\nbuild_manual_targets: false\n\nderive_targets_from_directories: false\n\nenabled_rules:\n    io_bazel_rules_scala\n    rules_java\n    rules_jvm\n\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"enabled_rules"})," option is especially important, as there are cases that Bazel\nBSP will not correctly detect scala rules within the workspace. You can share\nthis file across the team or add it to your .gitignore."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:".bsp/bazelbsp.json"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"This file contains all the neccessary info to start the Bazel BSP server."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'{\n  "name": "bazelbsp",\n  "argv": [\n    "/usr/lib/jvm/graal17/bin/java",\n    "-classpath",\n    "<classpath on your machine>",\n    "org.jetbrains.bsp.bazel.server.ServerInitializer",\n    "/path/to/workspace",\n    "/path/to/workspace/projectview.bazelproject",\n    "false"\n  ],\n  "version": "3.1.0-20240130-33760f0-NIGHTLY",\n  "bspVersion": "2.1.0",\n  "languages": [\n    "scala",\n    "java",\n    "kotlin"\n  ]\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"After these files are created and Metals connected to the build server, you\nshould then be able to edit and compile your code utilizing most of the\navailable features."}),"\n",(0,a.jsx)(n.p,{children:"There are some caveats however, as it's not currently possible to set up\neverything automatically for the user:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Sources need to be enabled via ",(0,a.jsx)(n.code,{children:"fetch_sources"})," for library dependencies in\nthe Bazel definition. For example:"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'maven_install(\n    artifacts =  ["com.github.ghostdogpr:caliban_2.13:2.0.1"],\n    maven_install_json = "@//:maven_install.json",\n    repositories = [\n        "https://maven.google.com",\n        "https://repo1.maven.org/maven2",\n    ],\n    version_conflict_policy = "pinned",\n    fetch_sources = True,\n)\n'})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsxs)(n.li,{children:["Go to references requires semanticdb plugin to be enabled in the Bazel build.\nThis can be done by adding the following to your ",(0,a.jsx)(n.code,{children:"BUILD"})," file:"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'load("@io_bazel_rules_scala//scala:scala_toolchain.bzl", "scala_toolchain")\n\nscala_toolchain(\n    name = "semanticdb_toolchain_impl",\n    enable_semanticdb = True,\n    semanticdb_bundle_in_jar = False,\n    visibility = ["//visibility:public"],\n)\n\ntoolchain(\n    name = "semanticdb_toolchain",\n    toolchain = "semanticdb_toolchain_impl",\n    toolchain_type = "@io_bazel_rules_scala//scala:toolchain_type",\n    visibility = ["//visibility:public"],\n)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["and in your ",(0,a.jsx)(n.code,{children:"WORKSPACE"})," file:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-Scala",children:'register_toolchains(\n    "//:semanticdb_toolchain",\n)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["You can find a full example in\n",(0,a.jsx)(n.a,{href:"https://github.com/bazelbuild/rules_scala/tree/master/examples/semanticdb",children:"the official rules scala repository"})]}),"\n",(0,a.jsx)(n.h2,{id:"manual-installation",children:"Manual installation"}),"\n",(0,a.jsx)(n.p,{children:"Manual installation is not recommended for Bazel, as there is a couple of steps,\nwhich are not trivial for beginners. But if you are interested in the process\nanyway, here is a short guide:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Have ",(0,a.jsx)(n.a,{href:"https://get-coursier.io/docs/cli-installation",children:"coursier"})," installed"]}),"\n",(0,a.jsx)(n.li,{children:"Run in the directory where Bazel BSP should be installed:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"cs launch org.jetbrains.bsp:bazel-bsp:<version> -M org.jetbrains.bsp.bazel.install.Install -- --targets //...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Please check ",(0,a.jsx)(n.a,{href:"https://github.com/JetBrains/bazel-bsp/releases",children:"release"})," to find\nthe newest available version or check for the latest nightly using\n",(0,a.jsx)(n.code,{children:"cs complete-dep org.jetbrains.bsp:bazel-bsp:"})," command."]}),"\n",(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsxs)(n.li,{children:["Use ",(0,a.jsx)(n.code,{children:"Metals: Connect to build server"})," command if Metals didn't pick up the\nnew bsp configuration automatically."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"mezel",children:"Mezel"}),"\n",(0,a.jsxs)(n.p,{children:["If you are unable to make the default Bazel BSP server work, you can try using\n",(0,a.jsx)(n.a,{href:"https://github.com/ValdemarGr/mezel",children:"Mezel"}),", which is an alternative\nimplementation of BSP for Bazel."]}),"\n",(0,a.jsxs)(n.p,{children:["Check out the\n",(0,a.jsx)(n.a,{href:"https://github.com/ValdemarGr/mezel/blob/master/README.md",children:"Mezel README"})," for\nmore information."]}),"\n",(0,a.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,a.jsx)(n.h3,{id:"bazel-is-restarting-between-cli-and-metals",children:"Bazel is restarting between CLI and Metals"}),"\n",(0,a.jsx)(n.p,{children:"This possibly means that some of the environment variables are set to different\nvalues between what Metals and Bazel are using. Some of the variables that\ninfluence this are PATH, PWD, JAVA_HOME and others. Make sure that these are set\nto the same values in both environments. If possible let us know if we can\nimprove the default behaviour of Metals to avoid this issue."}),"\n",(0,a.jsxs)(n.p,{children:["Alternatively, adding ",(0,a.jsx)(n.code,{children:"--incompatible_strict_action_env=true"})," option to .bazelrc\nmight help in your case."]})]})}function h(e={}){let{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},84429:function(e,n,t){t.d(n,{R:()=>s,x:()=>o});var l=t(96540);let a={},i=l.createContext(a);function s(e){let n=l.useContext(i);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),l.createElement(i.Provider,{value:n},e.children)}}}]);