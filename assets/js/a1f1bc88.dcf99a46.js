"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["3512"],{48070:function(e,n,i){i.r(n),i.d(n,{metadata:()=>t,contentTitle:()=>l,default:()=>h,assets:()=>o,toc:()=>a,frontMatter:()=>d});var t=JSON.parse('{"id":"integrations/tree-view-protocol","title":"Tree View Protocol","description":"Metals implements a Language Server Protocol extension called the \\"Tree View","source":"@site/target/docs/integrations/tree-view-protocol.md","sourceDirName":"integrations","slug":"/integrations/tree-view-protocol","permalink":"/metals/docs/integrations/tree-view-protocol","draft":false,"unlisted":false,"editUrl":"https://github.com/scalameta/metals/edit/main/docs/integrations/tree-view-protocol.md","tags":[],"version":"current","frontMatter":{"id":"tree-view-protocol","title":"Tree View Protocol"},"sidebar":"docs","previous":{"title":"Test Explorer","permalink":"/metals/docs/integrations/test-explorer"},"next":{"title":"Running and debugging","permalink":"/metals/docs/integrations/debug-adapter-protocol"}}'),s=i("85893"),r=i("50065");let d={id:"tree-view-protocol",title:"Tree View Protocol"},l=void 0,o={},a=[{value:"Base data structures",id:"base-data-structures",level:2},{value:"Tree View",id:"tree-view",level:3},{value:"Tree View Node",id:"tree-view-node",level:3},{value:"Tree View Command",id:"tree-view-command",level:3},{value:"Endpoints",id:"endpoints",level:2},{value:"<code>initialize</code>",id:"initialize",level:3},{value:"<code>metals/treeViewChildren</code>",id:"metalstreeviewchildren",level:3},{value:"<code>metals/treeViewParent</code>",id:"metalstreeviewparent",level:3},{value:"<code>metals/treeViewDidChange</code>",id:"metalstreeviewdidchange",level:3},{value:"<code>metals/treeViewVisibilityDidChange</code>",id:"metalstreeviewvisibilitydidchange",level:3},{value:"<code>metals/treeViewNodeCollapseDidChange</code>",id:"metalstreeviewnodecollapsedidchange",level:3},{value:"<code>metals/treeViewReveal</code>",id:"metalstreeviewreveal",level:3}];function c(e){let n={code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:'Metals implements a Language Server Protocol extension called the "Tree View\nProtocol" to render tree views in the editor client.'}),"\n",(0,s.jsx)(n.h2,{id:"base-data-structures",children:"Base data structures"}),"\n",(0,s.jsx)(n.h3,{id:"tree-view",children:"Tree View"}),"\n",(0,s.jsx)(n.p,{children:'One "tree view" represents the root of a tree along with all of its descendent\ntree nodes. Multiple tree views can be displayed at the same time in an editor\nclient.'}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://i.imgur.com/FRWL3Aq.png",alt:"Example tree views"})}),"\n",(0,s.jsxs)(n.p,{children:["A tree view is uniquely identified by a ",(0,s.jsx)(n.code,{children:"viewId: string"})," field in other data\nstructures."]}),"\n",(0,s.jsx)(n.h3,{id:"tree-view-node",children:"Tree View Node"}),"\n",(0,s.jsx)(n.p,{children:"A tree view can contain multiple tree view nodes. A tree view node can have the\nfollowing metadata."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'interface TreeViewNode {\n  /** The ID of the view that this node is associated with. */\n  viewId: string;\n  /** The URI of this node, or undefined if node is a root of the tree. */\n  nodeUri?: string;\n  /** The title to display for this node. */\n  label: string;\n  /** An optional command to trigger when the user clicks on node. */\n  command?: Command;\n  /** An optional SVG icon to display next to the label of this node. */\n  icon?: string;\n  /** An optional description of this node that is displayed when the user hovers over this node. */\n  tooltip?: string;\n  /**\n   * Whether this tree node should be collapsed, expanded or if it has no children.\n   *\n   * - undefined: this node has no children.\n   * - collapsed: this node has children and this node should be auto-expanded\n   *   on the first load.\n   * - expanded: this node has children and the user should manually expand\n   *   this node to see the children.\n   */\n  collapseState?: "expanded" | "collapsed";\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The children of a tree view node can be obtained through the\n",(0,s.jsx)(n.code,{children:"metals/treeViewChildren"})," request."]}),"\n",(0,s.jsx)(n.h3,{id:"tree-view-command",children:"Tree View Command"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"/**\n * A command to execute on the client when the user clicks on a tree view node.\n */\ninterface TreeViewCommand {\n  /** The title of the command, the client is free to not display this title in the UI. */\n  title: string;\n  /** The identifier of the command that should be executed by the client. */\n  command: string;\n  /** A description of what this command does. */\n  tooltip?: string;\n  /** Optional arguments to invoke the command with. */\n  arguments?: any[];\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"endpoints",children:"Endpoints"}),"\n",(0,s.jsx)(n.p,{children:"The Tree View Protocol (TVP) consists of several JSON-RPC requests and\nnotification endpoints."}),"\n",(0,s.jsx)(n.h3,{id:"initialize",children:(0,s.jsx)(n.code,{children:"initialize"})}),"\n",(0,s.jsxs)(n.p,{children:["The Tree View Protocol is only enabled when both the client and server declare\nsupport for the protocol by adding an ",(0,s.jsx)(n.code,{children:"treeViewProvider: true"})," field to the\nexperimental section of the server and client capabilities in the ",(0,s.jsx)(n.code,{children:"initialize"}),"\nresponse."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "capabilities": {\n    "experimental": {\n      "treeViewProvider": true\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"metalstreeviewchildren",children:(0,s.jsx)(n.code,{children:"metals/treeViewChildren"})}),"\n",(0,s.jsxs)(n.p,{children:["The tree view children request is sent from the client to the server to get the\nchildren nodes of a tree view node. The client is safe to cache the response of\nthe children until server sends a ",(0,s.jsx)(n.code,{children:"metals/treeViewDidChange"})," notification for\nthe parent node or one of its ancestor nodes."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Request"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["method: ",(0,s.jsx)(n.code,{children:"metals/treeViewChildren"})]}),"\n",(0,s.jsxs)(n.li,{children:["params: ",(0,s.jsx)(n.code,{children:"TreeViewChildrenParams"})," defined as follows."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface TreeViewChildrenParams {\n  /** The ID of the view that this node is associated with. */\n  viewId: string;\n  /** The URI of the parent node or undefined when listing the root node. */\n  nodeUri?: string;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Response"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["result: ",(0,s.jsx)(n.code,{children:"TreeViewChildrenResult"})," defined as follows."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface TreeViewChildrenResult {\n  /** The child nodes of the requested parent node. */\n  nodes: TreeViewNode[];\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"metalstreeviewparent",children:(0,s.jsx)(n.code,{children:"metals/treeViewParent"})}),"\n",(0,s.jsxs)(n.p,{children:["The tree view parent request is sent from the client to the server to obtain the\nparent node of a child node. The ",(0,s.jsx)(n.code,{children:"metals/treeViewParent"})," endpoint is required to\nsupport ",(0,s.jsx)(n.code,{children:"metals/treeViewReveal"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Request"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["method: ",(0,s.jsx)(n.code,{children:"metals/treeViewParent"})]}),"\n",(0,s.jsxs)(n.li,{children:["params: ",(0,s.jsx)(n.code,{children:"TreeViewParentParams"})," defined as follows."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface TreeViewParentParams {\n  /** The ID of the view that the nodeUri is associated with. */\n  viewId: string;\n  /** The URI of the child node. */\n  nodeUri: string;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Response"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["result: ",(0,s.jsx)(n.code,{children:"TreeViewParentResult"})," defined as follows."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface TreeViewParentResult {\n  /** The parent node URI or undefined when the parent is the root node. */\n  uri?: string;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"metalstreeviewdidchange",children:(0,s.jsx)(n.code,{children:"metals/treeViewDidChange"})}),"\n",(0,s.jsx)(n.p,{children:"The tree view did change notification is sent from the server to the client to\nnotify that the metadata about a given tree view node has changed."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Notification"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["method: ",(0,s.jsx)(n.code,{children:"metals/treeViewVisibilityDidChange"})]}),"\n",(0,s.jsxs)(n.li,{children:["params: ",(0,s.jsx)(n.code,{children:"TreeViewDidChangeParams"})," defined as follows:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface TreeViewDidChangeParams {\n  /** The nodes that have changed. */\n  nodes: TreeViewNode[];\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"metalstreeviewvisibilitydidchange",children:(0,s.jsx)(n.code,{children:"metals/treeViewVisibilityDidChange"})}),"\n",(0,s.jsx)(n.p,{children:"The visibility did change notification is sent from the client to the server to\nnotify that the visibility of a tree view has changed."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Notification"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["method: ",(0,s.jsx)(n.code,{children:"metals/treeViewVisibilityDidChange"})]}),"\n",(0,s.jsxs)(n.li,{children:["params: ",(0,s.jsx)(n.code,{children:"TreeViewVisibilityDidChangeParams"})," defined as follows:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface TreeViewVisibilityDidChangeParams {\n  /** The ID of the view that this node is associated with. */\n  viewId: string;\n  /** True if the node is visible in the editor UI, false otherwise. */\n  visible: boolean;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"metalstreeviewnodecollapsedidchange",children:(0,s.jsx)(n.code,{children:"metals/treeViewNodeCollapseDidChange"})}),"\n",(0,s.jsx)(n.p,{children:"The collapse did change notification is sent from the client to the server to\nnotify that a tree node has either been collapsed or expanded."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Notification"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["method: ",(0,s.jsx)(n.code,{children:"metals/treeViewNodeCollapseDidChange"})]}),"\n",(0,s.jsxs)(n.li,{children:["params: ",(0,s.jsx)(n.code,{children:"TreeViewNodeCollapseDidChangeParams"})," defined as follows:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface TreeViewNodeCollapseDidChangeParams {\n  /** The ID of the view that this node is associated with. */\n  viewId: string;\n  /** The URI of the node that was collapsed or expanded. */\n  nodeUri: string;\n  /** True if the node is collapsed, false if the node was expanded. */\n  collapsed: boolean;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"metalstreeviewreveal",children:(0,s.jsx)(n.code,{children:"metals/treeViewReveal"})}),"\n",(0,s.jsx)(n.p,{children:"The reveal request is sent from the client to the server to convert a text\ndocument position into it's corresponding tree view node."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Request"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["method: ",(0,s.jsx)(n.code,{children:"metals/treeViewReveal"})]}),"\n",(0,s.jsxs)(n.li,{children:["params: ",(0,s.jsx)(n.code,{children:"TextDocumentPositionParams"}),", as defined in LSP."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Response"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["result: ",(0,s.jsx)(n.code,{children:"TreeViewRevealResult"})," defined as follows."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface MetalsTreeRevealResult {\n  /** The ID of the view that this node is associated with. */\n  viewId: string;\n  /**\n   * The list of URIs for the node to reveal and all of its ancestor parents.\n   *\n   * The node to reveal is at index 0, it's parent is at index 1 and so forth\n   * up until the root node.\n   */\n  uriChain: string[];\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example implementation of the reveal request."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://user-images.githubusercontent.com/1408093/60284529-0d1a5e80-990c-11e9-853a-0aa0f6e12993.gif",alt:"2019-06-27 18 47 17"})})]})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},50065:function(e,n,i){i.d(n,{Z:function(){return l},a:function(){return d}});var t=i(67294);let s={},r=t.createContext(s);function d(e){let n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);